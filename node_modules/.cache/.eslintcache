[{"/Users/vamshikrishnaenjapuri/Documents/magic_hat_tshht/src/index.tsx":"1","/Users/vamshikrishnaenjapuri/Documents/magic_hat_tshht/src/reportWebVitals.ts":"2","/Users/vamshikrishnaenjapuri/Documents/magic_hat_tshht/src/components/menu.tsx":"3","/Users/vamshikrishnaenjapuri/Documents/composable-labs/nft_launcher/src/index.tsx":"4","/Users/vamshikrishnaenjapuri/Documents/composable-labs/nft_launcher/src/reportWebVitals.ts":"5","/Users/vamshikrishnaenjapuri/Documents/composable-labs/nft_launcher/src/components/App.tsx":"6","/Users/vamshikrishnaenjapuri/Documents/composable-labs/nft_launcher/src/components/Home.tsx":"7","/Users/vamshikrishnaenjapuri/Documents/composable-labs/nft_launcher/src/config/config.ts":"8","/Users/vamshikrishnaenjapuri/Documents/composable-labs/nft_launcher/src/config/connection.tsx":"9","/Users/vamshikrishnaenjapuri/Documents/composable-labs/nft_launcher/src/programs/candy-machine.ts":"10","/Users/vamshikrishnaenjapuri/Documents/composable-labs/nft_launcher/src/utils/utils.ts":"11"},{"size":457,"mtime":1657113129486,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":1657113129488,"results":"14","hashOfConfig":"13"},{"size":1824,"mtime":1657113129484,"results":"15","hashOfConfig":"13"},{"size":445,"mtime":1660749945185,"results":"16","hashOfConfig":"17"},{"size":425,"mtime":1660677411817,"results":"18","hashOfConfig":"17"},{"size":2278,"mtime":1660680780690,"results":"19","hashOfConfig":"17"},{"size":18030,"mtime":1661799649218,"results":"20","hashOfConfig":"17"},{"size":3285,"mtime":1660677411810,"results":"21","hashOfConfig":"17"},{"size":14608,"mtime":1660677411810,"results":"22","hashOfConfig":"17"},{"size":19212,"mtime":1660681894671,"results":"23","hashOfConfig":"17"},{"size":3204,"mtime":1660677411817,"results":"24","hashOfConfig":"17"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"zcs8kf",{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"27"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"wk3ya",{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":86,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"35"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"/Users/vamshikrishnaenjapuri/Documents/magic_hat_tshht/src/index.tsx",[],["51","52"],"/Users/vamshikrishnaenjapuri/Documents/magic_hat_tshht/src/reportWebVitals.ts",[],"/Users/vamshikrishnaenjapuri/Documents/magic_hat_tshht/src/components/menu.tsx",["53"],"import { useState } from \"react\";\nimport Discord from \"../assets/discord.png\";\nimport Twitter from \"../assets/twitter_copy.png\";\nimport RightArrow from \"../assets/right_arrow_menu.png\";\nimport \"../App.css\";\n\nconst MenuContent = (props: any) => {\n  const [items] = useState([\"VAULT\", \"TEAM\", \"ALPHA\", \"STAKE\"]);\n\n  return (\n    <div className=\"menu\">\n      {items.map((i) => (\n        <div className=\"menu-item\" key={i}>\n          <a\n            className=\"menu-item-inside\"\n            onClick={() => props.closeCallback(i)}\n            target=\"_blank\"\n          >\n            {i}{\" \"}\n            <span className=\"right-arrow-menu\">\n              <img alt=\"Right-arrow\" src={RightArrow} />\n            </span>\n          </a>\n        </div>\n      ))}\n      <div className=\"menu-item m-t-15\">\n        <a\n          className=\"menu-item-inside\"\n          href=\"https://secret-alpha.gitbook.io/glitch/\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          onClick={() => props.closeCallback(1)}\n        >\n          Whitepaper{\" \"}\n          <span className=\"right-arrow-menu\">\n            <img alt=\"Right-arrow\" src={RightArrow} />\n          </span>\n        </a>\n      </div>\n      <div className=\"social-media-mobile\">\n        <a\n          href=\"https://twitter.com/SecretAlphaLabs\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          onClick={() => props.closeCallback(1)}\n        >\n          <img alt=\"Twitter\" className=\"social-icons-mobile\" src={Twitter} />\n        </a>\n        <a\n          href=\"https://discord.com/invite/SecretAlpha\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          onClick={() => props.closeCallback(1)}\n        >\n          <img alt=\"Discord\" className=\"social-icons-mobile\" src={Discord} />\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default MenuContent;\n","/Users/vamshikrishnaenjapuri/Documents/composable-labs/nft_launcher/src/index.tsx",[],["54","55"],"/Users/vamshikrishnaenjapuri/Documents/composable-labs/nft_launcher/src/reportWebVitals.ts",[],"/Users/vamshikrishnaenjapuri/Documents/composable-labs/nft_launcher/src/components/App.tsx",[],"/Users/vamshikrishnaenjapuri/Documents/composable-labs/nft_launcher/src/components/Home.tsx",["56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141"],"/Users/vamshikrishnaenjapuri/Documents/composable-labs/nft_launcher/src/config/config.ts",[],"/Users/vamshikrishnaenjapuri/Documents/composable-labs/nft_launcher/src/config/connection.tsx",[],"/Users/vamshikrishnaenjapuri/Documents/composable-labs/nft_launcher/src/programs/candy-machine.ts",["142"],"import * as anchor from '@project-serum/anchor';\n\nimport { MintLayout, Token } from '@solana/spl-token';\nimport { PublicKey, SystemProgram } from '@solana/web3.js';\nimport { sendTransactions } from '../config/connection';\nimport idlMagicHat from '../idl/magic_hat.json';\n\nimport {\n  CIVIC,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken\n} from '../utils/utils';\nimport { SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID, TOKEN_PROGRAM_ID, MAGIC_HAT_ID } from '../config/config';\n// import idl from \"./wallet_whitelist.json\";\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\n);\n\nconst MAGIC_HAT_PROGRAM_V2_ID = new anchor.web3.PublicKey(\n  'JBw14YzhNTQGqUX54MatDgxDrCPopKf4EGcJHoHfq5ha',\n);\n\ninterface MagicHatState {\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  isPresale: boolean;\n  goLiveDate: anchor.BN;\n  price: anchor.BN;\n  gatekeeper: null | {\n    expireOnUse: boolean;\n    gatekeeperNetwork: anchor.web3.PublicKey;\n  };\n  endSettings: null | {\n    number: anchor.BN;\n    endSettingType: any;\n  };\n  whitelistMintSettings: null | {\n    mode: any;\n    mint: anchor.web3.PublicKey;\n    presale: boolean;\n    discountPrice: null | anchor.BN;\n  };\n  hiddenSettings: null | {\n    name: string;\n    uri: string;\n    hash: Uint8Array;\n  };\n}\n\nexport interface MagicHatAccount {\n  id: anchor.web3.PublicKey;\n  program: anchor.Program;\n  state: MagicHatState;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  queryStatus = false,\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection && connection._signatureSubscriptions && connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log('Returning status', status);\n  return status;\n};\n\nconst createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getMagicHatState = async (\n  anchorWallet: anchor.Wallet,\n  magicHatId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<MagicHatAccount> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'recent',\n  });\n\n  const idl:any = idlMagicHat;\n\n  const program = new anchor.Program(idl, MAGIC_HAT_PROGRAM_V2_ID, provider);\n\n  const state: any = await program.account.magicHat.fetch(magicHatId);\n  console.log(state.authority.toBase58());\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  const presale =\n    state.data.whitelistMintSettings &&\n    state.data.whitelistMintSettings.presale &&\n    (!state.data.goLiveDate ||\n      state.data.goLiveDate.toNumber() > new Date().getTime() / 1000);\n\n  return {\n    id: magicHatId,\n    program,\n    state: {\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive:\n        (presale ||\n          state.data.goLiveDate?.toNumber() < new Date().getTime() / 1000) &&\n        (state.data.endSettings\n          ? state.data.endSettings.endSettingType.date\n            ? state.data.endSettings.number.toNumber() >\n              new Date().getTime() / 1000\n            : itemsRedeemed < state.data.endSettings.number.toNumber()\n          : true),\n      isPresale: presale,\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n    },\n  };\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getMagicHatCreator = async (\n  magicHat: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('magic_hat'), magicHat.toBuffer()],\n    MAGIC_HAT_PROGRAM_V2_ID,\n  );\n};\n\nexport const mintOneToken = async (\n  magicHat: MagicHatAccount,\n  payer: anchor.web3.PublicKey,\n  wallet: any,\n  id:any\n): Promise<(string | undefined)[]> => {\n  const mint = anchor.web3.Keypair.generate();\n\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = magicHat.state.tokenMint\n    ? (await getAtaForMint(magicHat.state.tokenMint, payer))[0]\n    : payer;\n\n  const MAGIC_HAT_ID = magicHat.id;\n  console.log(MAGIC_HAT_ID.toBase58());\n  const remainingAccounts = [];\n  const signers: anchor.web3.Keypair[] = [mint];\n  const cleanupInstructions = [];\n  const instructions  = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await magicHat.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span,\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer,\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey,\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1,\n    )\n  ];\n\n  if (magicHat.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          magicHat.state.gatekeeper.gatekeeperNetwork,\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n    if (magicHat.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            magicHat.state.gatekeeper.gatekeeperNetwork,\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (magicHat.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      magicHat.state.whitelistMintSettings.mint,\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (magicHat.state.whitelistMintSettings.mode.burnEveryTime) {\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\n\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: whitelistBurnAuthority.publicKey,\n        isWritable: false,\n        isSigner: true,\n      });\n      signers.push(whitelistBurnAuthority);\n      const exists =\n        await magicHat.program.provider.connection.getAccountInfo(\n          whitelistToken,\n        );\n      if (exists) {\n        instructions.push(\n          Token.createApproveInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            whitelistBurnAuthority.publicKey,\n            payer,\n            [],\n            1,\n          ),\n        );\n        cleanupInstructions.push(\n          Token.createRevokeInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            payer,\n            [],\n          ),\n        );\n      }\n    }\n  }\n\n  if (magicHat.state.tokenMint) {\n    const transferAuthority = anchor.web3.Keypair.generate();\n    for (let index = 0; index < remainingAccounts.length; index++) {\n      let element = remainingAccounts[index];\n      if (element.pubkey === userPayingAccountAddress) {\n        console.log('Already Minted !!!')\n      }\n    }\n    signers.push(transferAuthority);\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: transferAuthority.publicKey,\n      isWritable: false,\n      isSigner: true,\n    });\n\n    instructions.push(\n      Token.createApproveInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        transferAuthority.publicKey,\n        payer,\n        [],\n        magicHat.state.price.toNumber(),\n      ),\n    );\n    cleanupInstructions.push(\n      Token.createRevokeInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        payer,\n        [],\n      ),\n    );\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [magicHatCreator, creatorBump] = await getMagicHatCreator(\n    MAGIC_HAT_ID,\n  );\n\n  instructions.push(\n    await magicHat.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        magicHat: MAGIC_HAT_ID,\n        magicHatCreator,\n        payer: payer,\n        wallet: magicHat.state.treasury,\n        metadata: metadataAddress,\n        mint: mint.publicKey,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        masterEdition,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: anchor.web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    }),\n  );\n  try {\n    return (\n      await sendTransactions(\n        magicHat.program.provider.connection,\n        magicHat.program.provider.wallet,\n        [instructions, cleanupInstructions],\n        [signers, []],\n      )\n    ).txs.map(t => t.txid);\n  } catch (e) {\n    console.log(e);\n  }\n\n  return [];\n};\n\nexport const mintOneTokenWL = async (\n  magicHat: MagicHatAccount,\n  payer: anchor.web3.PublicKey,\n  wallet_pda: any\n): Promise<(string | undefined)[]> => {\n  const mint = anchor.web3.Keypair.generate();\n\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = magicHat.state.tokenMint\n    ? (await getAtaForMint(magicHat.state.tokenMint, payer))[0]\n    : payer;\n  const remainingAccounts = [];\n  const signers: anchor.web3.Keypair[] = [mint];\n  const cleanupInstructions = [];\n  const instructions  = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await magicHat.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span,\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer,\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey,\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1,\n    )\n  ];\n\n  if (magicHat.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          magicHat.state.gatekeeper.gatekeeperNetwork,\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n    if (magicHat.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            magicHat.state.gatekeeper.gatekeeperNetwork,\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (magicHat.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      magicHat.state.whitelistMintSettings.mint,\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (magicHat.state.whitelistMintSettings.mode.burnEveryTime) {\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\n\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: whitelistBurnAuthority.publicKey,\n        isWritable: false,\n        isSigner: true,\n      });\n      signers.push(whitelistBurnAuthority);\n      const exists =\n        await magicHat.program.provider.connection.getAccountInfo(\n          whitelistToken,\n        );\n      if (exists) {\n        instructions.push(\n          Token.createApproveInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            whitelistBurnAuthority.publicKey,\n            payer,\n            [],\n            1,\n          ),\n        );\n        cleanupInstructions.push(\n          Token.createRevokeInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            payer,\n            [],\n          ),\n        );\n      }\n    }\n  }\n\n  if (magicHat.state.tokenMint) {\n    const transferAuthority = anchor.web3.Keypair.generate();\n    for (let index = 0; index < remainingAccounts.length; index++) {\n      let element = remainingAccounts[index];\n      if (element.pubkey === userPayingAccountAddress) {\n        console.log('Already Minted !!!')\n      }\n    }\n    signers.push(transferAuthority);\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: transferAuthority.publicKey,\n      isWritable: false,\n      isSigner: true,\n    });\n\n    instructions.push(\n      Token.createApproveInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        transferAuthority.publicKey,\n        payer,\n        [],\n        magicHat.state.price.toNumber(),\n      ),\n    );\n    cleanupInstructions.push(\n      Token.createRevokeInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        payer,\n        [],\n      ),\n    );\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [magicHatCreator, creatorBump] = await getMagicHatCreator(\n    MAGIC_HAT_ID,\n  );\n  console.log(MAGIC_HAT_ID.toBase58());\n  instructions.push(\n    await magicHat.program.instruction.wlMintNft(creatorBump, {\n      accounts: {\n        magicHat: MAGIC_HAT_ID,\n        walletWhitelist: wallet_pda,\n        magicHatCreator: magicHatCreator,\n        whitelistedAddress: payer,\n        wallet: magicHat.state.treasury,\n        metadata: metadataAddress,\n        mint: mint.publicKey,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        masterEdition,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: anchor.web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    }),\n  );\n  try {\n    return (\n      await sendTransactions(\n        magicHat.program.provider.connection,\n        magicHat.program.provider.wallet,\n        [instructions, cleanupInstructions],\n        [signers, []],\n      )\n    ).txs.map(t => t.txid);\n  } catch (e) {\n    console.log(e);\n  }\n\n  return [];\n};\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n","/Users/vamshikrishnaenjapuri/Documents/composable-labs/nft_launcher/src/utils/utils.ts",[],{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","severity":1,"message":"148","line":14,"column":11,"nodeType":"149","endLine":18,"endColumn":12},{"ruleId":"143","replacedBy":"150"},{"ruleId":"145","replacedBy":"151"},{"ruleId":"152","severity":1,"message":"153","line":3,"column":21,"nodeType":"154","messageId":"155","endLine":3,"endColumn":34},{"ruleId":"152","severity":1,"message":"156","line":3,"column":36,"nodeType":"154","messageId":"155","endLine":3,"endColumn":52},{"ruleId":"152","severity":1,"message":"157","line":3,"column":54,"nodeType":"154","messageId":"155","endLine":3,"endColumn":79},{"ruleId":"152","severity":1,"message":"158","line":3,"column":81,"nodeType":"154","messageId":"155","endLine":3,"endColumn":92},{"ruleId":"152","severity":1,"message":"159","line":3,"column":94,"nodeType":"154","messageId":"155","endLine":3,"endColumn":104},{"ruleId":"152","severity":1,"message":"160","line":3,"column":106,"nodeType":"154","messageId":"155","endLine":3,"endColumn":130},{"ruleId":"152","severity":1,"message":"161","line":3,"column":132,"nodeType":"154","messageId":"155","endLine":3,"endColumn":151},{"ruleId":"152","severity":1,"message":"162","line":3,"column":153,"nodeType":"154","messageId":"155","endLine":3,"endColumn":166},{"ruleId":"152","severity":1,"message":"163","line":11,"column":3,"nodeType":"154","messageId":"155","endLine":11,"endColumn":15},{"ruleId":"152","severity":1,"message":"164","line":12,"column":3,"nodeType":"154","messageId":"155","endLine":12,"endColumn":10},{"ruleId":"152","severity":1,"message":"165","line":13,"column":3,"nodeType":"154","messageId":"155","endLine":13,"endColumn":19},{"ruleId":"152","severity":1,"message":"166","line":14,"column":3,"nodeType":"154","messageId":"155","endLine":14,"endColumn":20},{"ruleId":"152","severity":1,"message":"167","line":15,"column":3,"nodeType":"154","messageId":"155","endLine":15,"endColumn":28},{"ruleId":"152","severity":1,"message":"168","line":16,"column":3,"nodeType":"154","messageId":"155","endLine":16,"endColumn":28},{"ruleId":"152","severity":1,"message":"169","line":17,"column":3,"nodeType":"154","messageId":"155","endLine":17,"endColumn":11},{"ruleId":"152","severity":1,"message":"170","line":18,"column":3,"nodeType":"154","messageId":"155","endLine":18,"endColumn":10},{"ruleId":"152","severity":1,"message":"171","line":19,"column":3,"nodeType":"154","messageId":"155","endLine":19,"endColumn":14},{"ruleId":"152","severity":1,"message":"172","line":20,"column":3,"nodeType":"154","messageId":"155","endLine":20,"endColumn":17},{"ruleId":"152","severity":1,"message":"173","line":21,"column":3,"nodeType":"154","messageId":"155","endLine":21,"endColumn":12},{"ruleId":"152","severity":1,"message":"174","line":22,"column":3,"nodeType":"154","messageId":"155","endLine":22,"endColumn":11},{"ruleId":"152","severity":1,"message":"175","line":23,"column":3,"nodeType":"154","messageId":"155","endLine":23,"endColumn":11},{"ruleId":"152","severity":1,"message":"176","line":24,"column":3,"nodeType":"154","messageId":"155","endLine":24,"endColumn":15},{"ruleId":"152","severity":1,"message":"177","line":25,"column":3,"nodeType":"154","messageId":"155","endLine":25,"endColumn":18},{"ruleId":"152","severity":1,"message":"178","line":26,"column":3,"nodeType":"154","messageId":"155","endLine":26,"endColumn":25},{"ruleId":"152","severity":1,"message":"179","line":27,"column":3,"nodeType":"154","messageId":"155","endLine":27,"endColumn":10},{"ruleId":"152","severity":1,"message":"180","line":28,"column":3,"nodeType":"154","messageId":"155","endLine":28,"endColumn":19},{"ruleId":"152","severity":1,"message":"181","line":29,"column":3,"nodeType":"154","messageId":"155","endLine":29,"endColumn":21},{"ruleId":"152","severity":1,"message":"182","line":30,"column":3,"nodeType":"154","messageId":"155","endLine":30,"endColumn":19},{"ruleId":"152","severity":1,"message":"183","line":31,"column":3,"nodeType":"154","messageId":"155","endLine":31,"endColumn":21},{"ruleId":"152","severity":1,"message":"184","line":32,"column":3,"nodeType":"154","messageId":"155","endLine":32,"endColumn":19},{"ruleId":"152","severity":1,"message":"185","line":33,"column":3,"nodeType":"154","messageId":"155","endLine":33,"endColumn":20},{"ruleId":"152","severity":1,"message":"186","line":34,"column":3,"nodeType":"154","messageId":"155","endLine":34,"endColumn":42},{"ruleId":"152","severity":1,"message":"187","line":35,"column":3,"nodeType":"154","messageId":"155","endLine":35,"endColumn":11},{"ruleId":"152","severity":1,"message":"188","line":36,"column":3,"nodeType":"154","messageId":"155","endLine":36,"endColumn":16},{"ruleId":"152","severity":1,"message":"189","line":37,"column":3,"nodeType":"154","messageId":"155","endLine":37,"endColumn":14},{"ruleId":"152","severity":1,"message":"190","line":38,"column":3,"nodeType":"154","messageId":"155","endLine":38,"endColumn":13},{"ruleId":"152","severity":1,"message":"191","line":41,"column":3,"nodeType":"154","messageId":"155","endLine":41,"endColumn":40},{"ruleId":"152","severity":1,"message":"192","line":44,"column":3,"nodeType":"154","messageId":"155","endLine":44,"endColumn":15},{"ruleId":"152","severity":1,"message":"193","line":45,"column":3,"nodeType":"154","messageId":"155","endLine":45,"endColumn":17},{"ruleId":"152","severity":1,"message":"194","line":47,"column":8,"nodeType":"154","messageId":"155","endLine":47,"endColumn":11},{"ruleId":"152","severity":1,"message":"195","line":48,"column":8,"nodeType":"154","messageId":"155","endLine":48,"endColumn":16},{"ruleId":"152","severity":1,"message":"196","line":49,"column":8,"nodeType":"154","messageId":"155","endLine":49,"endColumn":15},{"ruleId":"152","severity":1,"message":"197","line":50,"column":10,"nodeType":"154","messageId":"155","endLine":50,"endColumn":12},{"ruleId":"152","severity":1,"message":"198","line":50,"column":14,"nodeType":"154","messageId":"155","endLine":50,"endColumn":21},{"ruleId":"152","severity":1,"message":"199","line":51,"column":10,"nodeType":"154","messageId":"155","endLine":51,"endColumn":29},{"ruleId":"152","severity":1,"message":"200","line":53,"column":10,"nodeType":"154","messageId":"155","endLine":53,"endColumn":26},{"ruleId":"152","severity":1,"message":"201","line":54,"column":10,"nodeType":"154","messageId":"155","endLine":54,"endColumn":37},{"ruleId":"152","severity":1,"message":"202","line":54,"column":38,"nodeType":"154","messageId":"155","endLine":54,"endColumn":58},{"ruleId":"152","severity":1,"message":"203","line":54,"column":60,"nodeType":"154","messageId":"155","endLine":54,"endColumn":82},{"ruleId":"152","severity":1,"message":"204","line":56,"column":10,"nodeType":"154","messageId":"155","endLine":56,"endColumn":16},{"ruleId":"152","severity":1,"message":"205","line":56,"column":18,"nodeType":"154","messageId":"155","endLine":56,"endColumn":22},{"ruleId":"152","severity":1,"message":"206","line":59,"column":7,"nodeType":"154","messageId":"155","endLine":59,"endColumn":30},{"ruleId":"152","severity":1,"message":"207","line":67,"column":7,"nodeType":"154","messageId":"155","endLine":67,"endColumn":12},{"ruleId":"152","severity":1,"message":"208","line":73,"column":7,"nodeType":"154","messageId":"155","endLine":73,"endColumn":17},{"ruleId":"152","severity":1,"message":"209","line":92,"column":11,"nodeType":"154","messageId":"155","endLine":92,"endColumn":14},{"ruleId":"152","severity":1,"message":"210","line":113,"column":7,"nodeType":"154","messageId":"155","endLine":113,"endColumn":17},{"ruleId":"152","severity":1,"message":"211","line":118,"column":7,"nodeType":"154","messageId":"155","endLine":118,"endColumn":13},{"ruleId":"152","severity":1,"message":"212","line":143,"column":10,"nodeType":"154","messageId":"155","endLine":143,"endColumn":23},{"ruleId":"152","severity":1,"message":"213","line":143,"column":25,"nodeType":"154","messageId":"155","endLine":143,"endColumn":41},{"ruleId":"152","severity":1,"message":"214","line":144,"column":10,"nodeType":"154","messageId":"155","endLine":144,"endColumn":18},{"ruleId":"152","severity":1,"message":"215","line":150,"column":26,"nodeType":"154","messageId":"155","endLine":150,"endColumn":43},{"ruleId":"152","severity":1,"message":"216","line":153,"column":10,"nodeType":"154","messageId":"155","endLine":153,"endColumn":18},{"ruleId":"152","severity":1,"message":"217","line":154,"column":10,"nodeType":"154","messageId":"155","endLine":154,"endColumn":21},{"ruleId":"152","severity":1,"message":"218","line":155,"column":10,"nodeType":"154","messageId":"155","endLine":155,"endColumn":26},{"ruleId":"152","severity":1,"message":"219","line":156,"column":10,"nodeType":"154","messageId":"155","endLine":156,"endColumn":24},{"ruleId":"152","severity":1,"message":"220","line":156,"column":26,"nodeType":"154","messageId":"155","endLine":156,"endColumn":43},{"ruleId":"152","severity":1,"message":"221","line":157,"column":22,"nodeType":"154","messageId":"155","endLine":157,"endColumn":35},{"ruleId":"152","severity":1,"message":"222","line":158,"column":10,"nodeType":"154","messageId":"155","endLine":158,"endColumn":19},{"ruleId":"152","severity":1,"message":"223","line":159,"column":10,"nodeType":"154","messageId":"155","endLine":159,"endColumn":19},{"ruleId":"152","severity":1,"message":"224","line":159,"column":21,"nodeType":"154","messageId":"155","endLine":159,"endColumn":33},{"ruleId":"152","severity":1,"message":"225","line":160,"column":21,"nodeType":"154","messageId":"155","endLine":160,"endColumn":33},{"ruleId":"152","severity":1,"message":"226","line":161,"column":10,"nodeType":"154","messageId":"155","endLine":161,"endColumn":14},{"ruleId":"152","severity":1,"message":"227","line":161,"column":16,"nodeType":"154","messageId":"155","endLine":161,"endColumn":23},{"ruleId":"152","severity":1,"message":"228","line":222,"column":7,"nodeType":"154","messageId":"155","endLine":222,"endColumn":24},{"ruleId":"152","severity":1,"message":"229","line":245,"column":7,"nodeType":"154","messageId":"155","endLine":245,"endColumn":28},{"ruleId":"230","severity":1,"message":"231","line":253,"column":21,"nodeType":"232","messageId":"233","endLine":253,"endColumn":23},{"ruleId":"234","severity":1,"message":"235","line":281,"column":15,"nodeType":"149","endLine":281,"endColumn":195},{"ruleId":"234","severity":1,"message":"235","line":283,"column":15,"nodeType":"149","endLine":283,"endColumn":64},{"ruleId":"230","severity":1,"message":"236","line":294,"column":24,"nodeType":"232","messageId":"233","endLine":294,"endColumn":26},{"ruleId":"230","severity":1,"message":"236","line":298,"column":72,"nodeType":"232","messageId":"233","endLine":298,"endColumn":74},{"ruleId":"230","severity":1,"message":"236","line":301,"column":72,"nodeType":"232","messageId":"233","endLine":301,"endColumn":74},{"ruleId":"230","severity":1,"message":"236","line":304,"column":72,"nodeType":"232","messageId":"233","endLine":304,"endColumn":74},{"ruleId":"230","severity":1,"message":"236","line":307,"column":72,"nodeType":"232","messageId":"233","endLine":307,"endColumn":74},{"ruleId":"230","severity":1,"message":"236","line":310,"column":27,"nodeType":"232","messageId":"233","endLine":310,"endColumn":29},{"ruleId":"230","severity":1,"message":"236","line":354,"column":24,"nodeType":"232","messageId":"233","endLine":354,"endColumn":26},{"ruleId":"230","severity":1,"message":"236","line":385,"column":24,"nodeType":"232","messageId":"233","endLine":385,"endColumn":26},{"ruleId":"152","severity":1,"message":"237","line":4,"column":10,"nodeType":"154","messageId":"155","endLine":4,"endColumn":19},"no-native-reassign",["238"],"no-negated-in-lhs",["239"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement",["238"],["239"],"@typescript-eslint/no-unused-vars","'SystemProgram' is defined but never used.","Identifier","unusedVar","'LAMPORTS_PER_SOL' is defined but never used.","'sendAndConfirmTransaction' is defined but never used.","'Transaction' is defined but never used.","'Connection' is defined but never used.","'GetProgramAccountsFilter' is defined but never used.","'TokenAccountsFilter' is defined but never used.","'clusterApiUrl' is defined but never used.","'MAGIC_HAT_ID' is defined but never used.","'pdaSeed' is defined but never used.","'pdaWhitelistSeed' is defined but never used.","'MAGIC_HAT_CREATOR' is defined but never used.","'TOKEN_METADATA_PROGRAM_ID' is defined but never used.","'MAGIC_HAT_CREATOR_KEYPAIR' is defined but never used.","'GOG_TIME' is defined but never used.","'WL_TIME' is defined but never used.","'PUBLIC_TIME' is defined but never used.","'COMMUNITY_TIME' is defined but never used.","'GOG_PRICE' is defined but never used.","'OG_PRICE' is defined but never used.","'WL_PRICE' is defined but never used.","'PUBLIC_PRICE' is defined but never used.","'COMMUNITY_PRICE' is defined but never used.","'MAGIC_STAKE_PROGRAM_ID' is defined but never used.","'FARM_ID' is defined but never used.","'TOKEN_PROGRAM_ID' is defined but never used.","'MAHANOTHIA_FARM_ID' is defined but never used.","'BASEMENT_FARM_ID' is defined but never used.","'SAN_CHETOS_FARM_ID' is defined but never used.","'MAGNEXIA_FARM_ID' is defined but never used.","'RAUDCHERI_FARM_ID' is defined but never used.","'SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID' is defined but never used.","'GEM_BANK' is defined but never used.","'COLLECTION_ID' is defined but never used.","'REWARD_MINT' is defined but never used.","'FEE_WALLET' is defined but never used.","'awaitTransactionSignatureConfirmation' is defined but never used.","'mintOneToken' is defined but never used.","'mintOneTokenWL' is defined but never used.","'idl' is defined but never used.","'idlStake' is defined but never used.","'idlBank' is defined but never used.","'BN' is defined but never used.","'Program' is defined but never used.","'CircularProgressbar' is defined but never used.","'sendTransactions' is defined but never used.","'getParsedNftAccountsByOwner' is defined but never used.","'isValidSolanaAddress' is defined but never used.","'createConnectionConfig' is defined but never used.","'Button' is defined but never used.","'Flex' is defined but never used.","'MAGIC_HAT_PROGRAM_V2_ID' is assigned a value but never used.","'steps' is assigned a value but never used.","'responsive' is assigned a value but never used.","'NFT' is defined but never used.","'RewardType' is assigned a value but never used.","'LPType' is assigned a value but never used.","'isUserMinting' is assigned a value but never used.","'setIsUserMinting' is assigned a value but never used.","'magicHat' is assigned a value but never used.","'setClassNameState' is assigned a value but never used.","'isMobile' is assigned a value but never used.","'logoLoading' is assigned a value but never used.","'logoAlphaLoading' is assigned a value but never used.","'teamInfoMember' is assigned a value but never used.","'setTeamInfoMember' is assigned a value but never used.","'setWhitelists' is assigned a value but never used.","'completed' is assigned a value but never used.","'mintCount' is assigned a value but never used.","'setMintCount' is assigned a value but never used.","'setCurrentWl' is assigned a value but never used.","'time' is assigned a value but never used.","'setTime' is assigned a value but never used.","'nftStakeStepCount' is assigned a value but never used.","'currentWltype' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","Expected '===' and instead saw '=='.","'PublicKey' is defined but never used.","no-global-assign","no-unsafe-negation"]